<body>

    <h1 class="title"><strong>~ Data Structures ~</strong></h1>



    <div class="sub-section">

        <p> <pre>         Look @ the code:   <a href="https://github.com/GinaSomara/DataStrucutres2.0.git" target="_blank"> [JAVA code]</a>     |     <a href="https://github.com/GinaSomara/Data-Structure-cpp.git" target="_blank">[C++ code - RAW pointers]</a>     |     <a href="https://github.com/GinaSomara/Data-Structures---smart-pointers-version.git" target="_blank">[C++ code - SMART pointers]</a>
            ~ OR ~
        Open a live version:    <a href="https://replit.com/@GSOMARA15/Data-Structures#Main.java" target="_blank">[JAVA code]</a>   |   <a href="https://replit.com/@GSOMARA15/Data-Structures-1#BagInterface.h" target="_blank">[C++ code  - RAW pointers]</a>     |     <a href="https://replit.com/@GSOMARA15/DataStructures-smart-pointers#Include.h" target="_blank">[C++ code - SMART pointers]</a> </pre>
        </p> <hr> <br>    

        <h3><u>~ About this project ~</u></h3>
        <p><u>JAVA :</u> This is a fun project that I created after completing my first Data Structures class at San Francisco State University. We had a few assignments in
            class that I found very fun and also really helped me thoroughly understand Linked Lists, Queues, and Stack. I based this project after those
            to help demonstrate my ability to create data structures from scratch. Enjoy the colors and fun presentation!  <br><br>~ ~ ~<br>
        </p>
        <p><u>C++ :</u> These projects only contain linked lists. However, these programs are larger than the Java as I go into more detail within the functionality. I also added in several recursive functions to manipulate the elements in the linked list and also to present my understanding of recursive functions.
         This project was especially fun because of the pointers! I created 2 versions, the first is with raw pointers. The second version was re-coded
         to change all the raw pointers into smart pointers. <br> *** UPDATE: I am currently working on a unique_pointer ONLY version of the C++ Linked List. The goal of this is to replace every single shared_pointer/weak_pointer with a unique_pointer. This will be accomplished using the 
         .move() function. Changing every shared_pointer to a unique_pointer will showcase more secure code, in the aspect that only one pointer will be able to point to the head at all times. 
        </p>
    </div>

    <div class="sub-section">
        <h3><u>~ Obstacles I faced && Overcoming those Obstacles  ~</u></h3>
        <ul>
            <li><u>Linking Files -</u>-  I did not realize that when using template< typename ItemType > in C++, it is necessary to #include not only the .h header file, but also the .cpp file as well or there
            will be linker errors.</li>

            <li><u>Pointers -</u>- When changing over from raw pointers to smart pointers, I used more shared_pointers that I would prefer to in order to have multiple pointers pointing to the head at one time. I believe this creates a potential security risk.
            *** UPDATE: To solve this, a version with unique_pointers only is coming soon :) </li>

            <li><u>CMake -</u>- When downloading the template of this project (*see bottom of page for more info*), I added in more files than what was originally provided. After many failed build attempts, I realized the importance of the CMake and understood that all added files need to be included in the add_executable(). </li>
            
        </ul>


        <br><br><br><br>
        <p>Project Completion ON: May 2021</p> <br>

        <p>**Disclaimer**  The C++ Linked List is built off a bare skeleton code from the below authors. I linked all the preprocessing directives and coded in all functions, virtual function declarations. The skeleton coded included the basic empty files for the Include.h, LinkedBag.h, but did include a structure for output in the main driver class. The only reason for using the skeleton code vs creating a project from complete scratch was because I wanted to focus on understanding pointers and function/recursive implementation. <br> //  Created by Frank M. Carrano and Timothy M. Henry.
//  Copyright (c) 2017 Pearson Education, Hoboken, New Jersey.</p>
    </div>

</body>