<body>

    <h1 class="title"><strong>~ Tank Game ~</strong></h1>



    <div class="sub-section">

        <p> <pre>Look @ the code:   <a href="https://github.com/GinaSomara/Tank-Wars" target="_blank"> [JAVA code]</a></pre>
        </p> <hr> <br>    

        <h3><u>~ About this project ~</u></h3>
        <p>The main goal of this project was to focus exclusively on the software design of a basic tank shooter video game. Coupling and Cohesion was analyzed when developing the overarching design. The largest challenge of the project was the designing the collision handling structure to navigate and correct entity interaction within the game world.
        </p>

    </div>

    <div class="sub-section">
        <h3><u>~ Obstacles I faced && Overcoming those Obstacles  ~</u></h3>
        <ul>
            <li><u>Collision Handling -</u>- The collision handling went through 3 different phases. The first phase was utilizing "instanceOf" within the game driver in order to properly handle collisions between all of the entities. After this was accomplished, I refactored this set up because using "instanceOf" inside the GameDriver was leading to higher coupling and lower cohesion. For the next phase, I created a Grid class to turn the game arena into a grid where all entities where assigned to their respective grid box. This significantly cut down on the time complexity: Previously the runtime was O(n^2) due to iterating through a nested loop in order to identify collisions. However with the grid, it cut the time down to O(c) w/ c=100. With this implementation, only grid boxes that contained 2 entities were analyzed for collision handling. To completed this second phase, I then created an entire collision handling hierarchy in order to remove the responsibility from Game Driver, into a system designed specific for collision handling; this additionally and significantly cleaned up the GameDriver class.For the last phase in refactoring, I then utilized Generics and reflection [Class<? extends CollisionHandling>] in order cut down on the code duplication and complexities - significantly increasing memory efficiency - within the collision handling subclasses (i.e, TankTankCollisions, TankShellCollisions, TankWallCollisions, etc).</li>

            <li><u>Entity Hierarchy -</u>- The entity hierarchy was originally developed in mind with all entities as equals. All entities within the game - Shells, Tanks, Walls, Hearts etc. - were inheriting from an Entity Abstract Class. However after completing the project, I noticed there was memory inefficiency due to not all classes needing to utilize all inherited abstract methods. Therefore, I refactored all of the subEntity classes in order to better organize/ill how/what entities required in order to rid previous memory inefficiencies.</li>
        </ul>


        <br><br><br><br>
        <p>Project Completion ON: December 2021</p>
    </div>

</body> 